type User {
  id: ID!
  handle: String!
  bio: String!
  address: String!
}

type Track {
  id: ID!
  title: String!
  streamUrl: String!
  description: String!
  userId: String!
}

type Follow {
  id: ID!
  followerId: String!
  followingId: String!
}

type Repost {
  id: ID!
  reposterId: String!
  trackId: String!
}

input NewTrack {
  title: String!
  streamUrl: String!
  description: String!
  userId: String!
}

input NewUser {
  handle: String!
  bio: String!
  address: String!
}

input UpdateUser {
  bio: String
  address: String
}

input UpdateTrack {
  streamUrl: String
  description: String
}

type Query {
  users: [User!]!
  tracks: [Track!]!
  follows: [Follow]!
  reposts: [Repost]!
}

type Mutation {
  createUser(input: NewUser!): User!
  createTrack(input: NewTrack!): Track!
  updateUser(input: UpdateUser!): User!
  updateTrack(input: UpdateTrack!): Track!
}

union UserEvents = User | Track | Follow | Repost
union TrackEvents = Track | Repost

type Subscription {
  userEvents(userId: String!): UserEvents!
  trackEvents(trackId: String!): TrackEvents!
}
