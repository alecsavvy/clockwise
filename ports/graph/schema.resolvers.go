package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/alecsavvy/clockwise/cqrs/commands"
	"github.com/alecsavvy/clockwise/cqrs/entities"
	"github.com/alecsavvy/clockwise/ports/graph/model"
	"github.com/alecsavvy/clockwise/utils"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	us := r.userService

	createUserCmd := commands.NewCommand(commands.USER, commands.CREATE, commands.CreateUser{
		ID:      uuid.NewString(),
		Bio:     input.Bio,
		Handle:  input.Handle,
		Address: input.Address,
	})

	event, err := us.CreateUser(createUserCmd)
	if err != nil {
		return nil, err
	}

	userEntity := event.User
	newUser := &model.User{
		ID:      userEntity.ID,
		Handle:  userEntity.Handle,
		Bio:     userEntity.Bio,
		Address: userEntity.Address,
	}

	return newUser, nil
}

// CreateTrack is the resolver for the createTrack field.
func (r *mutationResolver) CreateTrack(ctx context.Context, input model.NewTrack) (*model.Track, error) {
	newTrack := &model.Track{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		StreamURL:   input.StreamURL,
		UserID:      input.UserID,
	}
	r.tracks = append(r.tracks, newTrack)
	return newTrack, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	us := r.userService

	users, err := us.GetUsers()
	if err != nil {
		return nil, err
	}

	userModels := utils.Map(users, func(userEntity *entities.UserEntity) *model.User {
		return &model.User{
			ID:      userEntity.ID,
			Handle:  userEntity.Handle,
			Bio:     userEntity.Bio,
			Address: userEntity.Address,
		}
	})
	return userModels, nil
}

// Tracks is the resolver for the tracks field.
func (r *queryResolver) Tracks(ctx context.Context) ([]*model.Track, error) {
	return r.tracks, nil
}

// NewUser is the resolver for the newUser field.
func (r *subscriptionResolver) NewUser(ctx context.Context) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: NewUser - newUser"))
}

// NewTrack is the resolver for the newTrack field.
func (r *subscriptionResolver) NewTrack(ctx context.Context) (<-chan *model.Track, error) {
	panic(fmt.Errorf("not implemented: NewTrack - newTrack"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
