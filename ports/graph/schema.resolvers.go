package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/alecsavvy/clockwise/cqrs/commands"
	"github.com/alecsavvy/clockwise/cqrs/entities"
	"github.com/alecsavvy/clockwise/ports/graph/model"
	"github.com/alecsavvy/clockwise/utils"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	us := r.userService

	createUserCmd := commands.NewCommand(commands.USER, commands.CREATE, commands.CreateUser{
		ID:      uuid.NewString(),
		Bio:     input.Bio,
		Handle:  input.Handle,
		Address: input.Address,
	})

	event, err := us.CreateUser(createUserCmd)
	if err != nil {
		return nil, err
	}

	userEntity := event.User
	newUser := &model.User{
		ID:      userEntity.ID,
		Handle:  userEntity.Handle,
		Bio:     userEntity.Bio,
		Address: userEntity.Address,
	}

	return newUser, nil
}

// CreateTrack is the resolver for the createTrack field.
func (r *mutationResolver) CreateTrack(ctx context.Context, input model.NewTrack) (*model.Track, error) {
	ts := r.trackService

	createTrackCmd := commands.NewCommand(commands.TRACK, commands.CREATE, commands.CreateTrack{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		StreamURL:   input.StreamURL,
		Genre:       input.Genre,
		UserID:      input.UserID,
	})

	event, err := ts.CreateTrack(createTrackCmd)
	if err != nil {
		return nil, err
	}

	trackEntity := event.Track
	newTrack := &model.Track{
		ID:          trackEntity.ID,
		Title:       trackEntity.Title,
		Description: trackEntity.Description,
		StreamURL:   trackEntity.StreamURL,
		Genre:       trackEntity.Genre,
		UserID:      trackEntity.UserID,
	}

	return newTrack, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateTrack is the resolver for the updateTrack field.
func (r *mutationResolver) UpdateTrack(ctx context.Context, input model.UpdateTrack) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: UpdateTrack - updateTrack"))
}

// Follow is the resolver for the follow field.
func (r *mutationResolver) Follow(ctx context.Context, input model.NewFollow) (*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Follow - follow"))
}

// Repost is the resolver for the repost field.
func (r *mutationResolver) Repost(ctx context.Context, input model.NewRepost) (*model.Repost, error) {
	panic(fmt.Errorf("not implemented: Repost - repost"))
}

// Unfollow is the resolver for the unfollow field.
func (r *mutationResolver) Unfollow(ctx context.Context, followID string) (string, error) {
	panic(fmt.Errorf("not implemented: Unfollow - unfollow"))
}

// Unrepost is the resolver for the unrepost field.
func (r *mutationResolver) Unrepost(ctx context.Context, repostID string) (string, error) {
	panic(fmt.Errorf("not implemented: Unrepost - unrepost"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	us := r.userService

	users, err := us.GetUsers()
	if err != nil {
		return nil, err
	}

	userModels := utils.Map(users, func(userEntity *entities.UserEntity) *model.User {
		return &model.User{
			ID:      userEntity.ID,
			Handle:  userEntity.Handle,
			Bio:     userEntity.Bio,
			Address: userEntity.Address,
		}
	})
	return userModels, nil
}

// Tracks is the resolver for the tracks field.
func (r *queryResolver) Tracks(ctx context.Context) ([]*model.Track, error) {
	ts := r.trackService

	tracks, err := ts.GetTracks()
	if err != nil {
		return nil, err
	}

	trackModels := utils.Map(tracks, func(trackEntity *entities.TrackEntity) *model.Track {
		return &model.Track{
			ID:          trackEntity.ID,
			Title:       trackEntity.Title,
			Description: trackEntity.Description,
			StreamURL:   trackEntity.StreamURL,
			Genre:       trackEntity.Genre,
			UserID:      trackEntity.UserID,
		}
	})

	return trackModels, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Track is the resolver for the track field.
func (r *queryResolver) Track(ctx context.Context, trackID string) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: Track - track"))
}

// Followers is the resolver for the followers field.
func (r *queryResolver) Followers(ctx context.Context, userID string) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Following is the resolver for the following field.
func (r *queryResolver) Following(ctx context.Context, userID string) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Following - following"))
}

// Reposts is the resolver for the reposts field.
func (r *queryResolver) Reposts(ctx context.Context, trackID string) ([]*model.Repost, error) {
	panic(fmt.Errorf("not implemented: Reposts - reposts"))
}

// UserEvents is the resolver for the userEvents field.
func (r *subscriptionResolver) UserEvents(ctx context.Context, userID string) (<-chan model.UserEvents, error) {
	panic(fmt.Errorf("not implemented: UserEvents - userEvents"))
}

// TrackEvents is the resolver for the trackEvents field.
func (r *subscriptionResolver) TrackEvents(ctx context.Context, trackID string) (<-chan model.TrackEvents, error) {
	panic(fmt.Errorf("not implemented: TrackEvents - trackEvents"))
}

// GenreEvents is the resolver for the genreEvents field.
func (r *subscriptionResolver) GenreEvents(ctx context.Context, genre string) (<-chan model.TrackEvents, error) {
	panic(fmt.Errorf("not implemented: GenreEvents - genreEvents"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Follows(ctx context.Context) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Follows - follows"))
}
func (r *subscriptionResolver) NewUser(ctx context.Context) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: NewUser - newUser"))
}
func (r *subscriptionResolver) NewTrack(ctx context.Context) (<-chan *model.Track, error) {
	panic(fmt.Errorf("not implemented: NewTrack - newTrack"))
}
