// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reads.sql

package db

import (
	"context"
)

const getFollowersByHandle = `-- name: GetFollowersByHandle :many
select u2.id, u2.handle, u2.address, u2.bio
from users u1
    join follows f on u1.id = f.following_id
    join users u2 on f.follower_id = u2.id
where u1.handle = $1
`

func (q *Queries) GetFollowersByHandle(ctx context.Context, handle string) ([]User, error) {
	rows, err := q.db.Query(ctx, getFollowersByHandle, handle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Handle,
			&i.Address,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTracks = `-- name: GetTracks :many
select id, title, stream_url, description, user_id
from tracks
order by title
`

func (q *Queries) GetTracks(ctx context.Context) ([]Track, error) {
	rows, err := q.db.Query(ctx, getTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StreamUrl,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByHandle = `-- name: GetUserByHandle :one
select id, handle, address, bio
from users
where handle = $1
limit 1
`

func (q *Queries) GetUserByHandle(ctx context.Context, handle string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByHandle, handle)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Handle,
		&i.Address,
		&i.Bio,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, handle, address, bio
from users
order by handle
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Handle,
			&i.Address,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
