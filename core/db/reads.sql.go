// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reads.sql

package db

import (
	"context"
)

const getFollowers = `-- name: GetFollowers :many
select id, follower_id, following_id, created_at
from follows
where follower_id = $1
order by created_at
`

func (q *Queries) GetFollowers(ctx context.Context, followerID string) ([]Follow, error) {
	rows, err := q.db.Query(ctx, getFollowers, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.ID,
			&i.FollowerID,
			&i.FollowingID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
select id, follower_id, following_id, created_at
from follows
where following_id = $1
order by created_at
`

func (q *Queries) GetFollowing(ctx context.Context, followingID string) ([]Follow, error) {
	rows, err := q.db.Query(ctx, getFollowing, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.ID,
			&i.FollowerID,
			&i.FollowingID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackReposts = `-- name: GetTrackReposts :many
select id, reposter_id, track_id, created_at
from reposts
where track_id = $1
order by created_at
`

func (q *Queries) GetTrackReposts(ctx context.Context, trackID string) ([]Repost, error) {
	rows, err := q.db.Query(ctx, getTrackReposts, trackID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repost
	for rows.Next() {
		var i Repost
		if err := rows.Scan(
			&i.ID,
			&i.ReposterID,
			&i.TrackID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTracks = `-- name: GetTracks :many
select id, title, stream_url, description, genre, user_id, created_at
from tracks
order by created_at
`

func (q *Queries) GetTracks(ctx context.Context) ([]Track, error) {
	rows, err := q.db.Query(ctx, getTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StreamUrl,
			&i.Description,
			&i.Genre,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByHandle = `-- name: GetUserByHandle :one
select id, handle, address, bio, created_at
from users
where handle = $1
limit 1
`

func (q *Queries) GetUserByHandle(ctx context.Context, handle string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByHandle, handle)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Handle,
		&i.Address,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReposts = `-- name: GetUserReposts :many
select id, reposter_id, track_id, created_at
from reposts
where reposter_id = $1
order by created_at
`

func (q *Queries) GetUserReposts(ctx context.Context, reposterID string) ([]Repost, error) {
	rows, err := q.db.Query(ctx, getUserReposts, reposterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repost
	for rows.Next() {
		var i Repost
		if err := rows.Scan(
			&i.ID,
			&i.ReposterID,
			&i.TrackID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
select id, handle, address, bio, created_at
from users
order by created_at
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Handle,
			&i.Address,
			&i.Bio,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
