// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: writes.sql

package db

import (
	"context"
)

const createBlock = `-- name: CreateBlock :exec
insert into blocks (blocknumber, blockhash)
values ($1, $2)
`

type CreateBlockParams struct {
	Blocknumber int32
	Blockhash   []byte
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.db.Exec(ctx, createBlock, arg.Blocknumber, arg.Blockhash)
	return err
}

const createFollow = `-- name: CreateFollow :exec
insert into follows (id, follower_id, following_id, created_at)
values ($1, $2, $3, & 4)
`

type CreateFollowParams struct {
	ID          string
	FollowerID  string
	FollowingID string
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.Exec(ctx, createFollow, arg.ID, arg.FollowerID, arg.FollowingID)
	return err
}

const createRepost = `-- name: CreateRepost :exec
insert into reposts (id, reposter_id, track_id, created_at)
values ($1, $2, $3, $4)
`

type CreateRepostParams struct {
	ID         string
	ReposterID string
	TrackID    string
	CreatedAt  int32
}

func (q *Queries) CreateRepost(ctx context.Context, arg CreateRepostParams) error {
	_, err := q.db.Exec(ctx, createRepost,
		arg.ID,
		arg.ReposterID,
		arg.TrackID,
		arg.CreatedAt,
	)
	return err
}

const createTrack = `-- name: CreateTrack :exec
insert into tracks (
        id,
        title,
        genre,
        stream_url,
        description,
        user_id,
        created_at
    )
values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateTrackParams struct {
	ID          string
	Title       string
	Genre       string
	StreamUrl   string
	Description string
	UserID      string
	CreatedAt   int32
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) error {
	_, err := q.db.Exec(ctx, createTrack,
		arg.ID,
		arg.Title,
		arg.Genre,
		arg.StreamUrl,
		arg.Description,
		arg.UserID,
		arg.CreatedAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
insert into users (id, handle, address, bio, created_at)
values ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID        string
	Handle    string
	Address   string
	Bio       string
	CreatedAt int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Handle,
		arg.Address,
		arg.Bio,
		arg.CreatedAt,
	)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
delete from follows
where id = $1
`

func (q *Queries) DeleteFollow(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteFollow, id)
	return err
}

const deleteRepost = `-- name: DeleteRepost :exec
delete from reposts
where id = $1
`

func (q *Queries) DeleteRepost(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteRepost, id)
	return err
}
