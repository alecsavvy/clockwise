type User {
  handle: String!
  address: String!
  bio: String!
  followers: [Follow]!
  following: [Follow]!
  reposts: [Repost]!
  tracks: [Track]!
}

type Track {
  id: String!
  title: String!
  streamUrl: String!
  description: String!
  userId: String!
  reposts: [Repost]!
}

type Follow {
  followerId: String!
  followeeId: String!
}

type Repost {
  reposterId: String!
  trackId: String!
}

input NewUser {
  address: String!
  handle: String!
  bio: String!
}

input NewTrack {
  title: String!
  streamUrl: String!
  description: String!
  userId: String!
}

input NewFollow {
  followerId: String!
  followeeId: String!
}

input NewUnfollow {
  followerId: String!
  followeeId: String!
}

input NewRepost {
  reposterId: String!
  trackId: String!
}

input NewUnrepost {
  reposterId: String!
  trackId: String!
}

type Query {
  getUsers: [User]!
  getTracks: [Track]!
  getUser(handle: String!): User
  getTrack(title: String!): Track
}

type Mutation {
  createUser(input: NewUser!): User!
  createTrack(input: NewTrack!): Track!
  followUser(input: NewFollow!): Follow!
  repostTrack(input: NewRepost!): Repost!
  unfollowUser(input: NewUnfollow!): Boolean!
  unrepostTrack(input: NewUnrepost!): Boolean!
}

type Subscription {
  tracks: Track!
  users: User!
  follows: Follow!
  reposts: Repost!
}
