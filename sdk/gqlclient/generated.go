// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqlclient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// ManageEntityManageEntity includes the requested fields of the GraphQL type ManageEntity.
type ManageEntityManageEntity struct {
	RequestId  string `json:"requestId"`
	UserId     int    `json:"userId"`
	Signer     string `json:"signer"`
	EntityType string `json:"entityType"`
	EntityId   int    `json:"entityId"`
	Metadata   string `json:"metadata"`
	Action     string `json:"action"`
}

// GetRequestId returns ManageEntityManageEntity.RequestId, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetRequestId() string { return v.RequestId }

// GetUserId returns ManageEntityManageEntity.UserId, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetUserId() int { return v.UserId }

// GetSigner returns ManageEntityManageEntity.Signer, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetSigner() string { return v.Signer }

// GetEntityType returns ManageEntityManageEntity.EntityType, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetEntityType() string { return v.EntityType }

// GetEntityId returns ManageEntityManageEntity.EntityId, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetEntityId() int { return v.EntityId }

// GetMetadata returns ManageEntityManageEntity.Metadata, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetMetadata() string { return v.Metadata }

// GetAction returns ManageEntityManageEntity.Action, and is useful for accessing the field via an interface.
func (v *ManageEntityManageEntity) GetAction() string { return v.Action }

// ManageEntityResponse is returned by ManageEntity on success.
type ManageEntityResponse struct {
	ManageEntity ManageEntityManageEntity `json:"manageEntity"`
}

// GetManageEntity returns ManageEntityResponse.ManageEntity, and is useful for accessing the field via an interface.
func (v *ManageEntityResponse) GetManageEntity() ManageEntityManageEntity { return v.ManageEntity }

// __ManageEntityInput is used internally by genqlient
type __ManageEntityInput struct {
	RequestId  string `json:"requestId"`
	UserId     int    `json:"userId"`
	Signer     string `json:"signer"`
	EntityType string `json:"entityType"`
	EntityId   int    `json:"entityId"`
	Metadata   string `json:"metadata"`
	Action     string `json:"action"`
}

// GetRequestId returns __ManageEntityInput.RequestId, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetRequestId() string { return v.RequestId }

// GetUserId returns __ManageEntityInput.UserId, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetUserId() int { return v.UserId }

// GetSigner returns __ManageEntityInput.Signer, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetSigner() string { return v.Signer }

// GetEntityType returns __ManageEntityInput.EntityType, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetEntityType() string { return v.EntityType }

// GetEntityId returns __ManageEntityInput.EntityId, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetEntityId() int { return v.EntityId }

// GetMetadata returns __ManageEntityInput.Metadata, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetMetadata() string { return v.Metadata }

// GetAction returns __ManageEntityInput.Action, and is useful for accessing the field via an interface.
func (v *__ManageEntityInput) GetAction() string { return v.Action }

// The query or mutation executed by ManageEntity.
const ManageEntity_Operation = `
mutation ManageEntity ($requestId: String!, $userId: Int!, $signer: String!, $entityType: String!, $entityId: Int!, $metadata: String!, $action: String!) {
	manageEntity(manageEntity: {requestId:$requestId,userId:$userId,signer:$signer,entityType:$entityType,entityId:$entityId,metadata:$metadata,action:$action}) {
		requestId
		userId
		signer
		entityType
		entityId
		metadata
		action
	}
}
`

func ManageEntity(
	ctx_ context.Context,
	client_ graphql.Client,
	requestId string,
	userId int,
	signer string,
	entityType string,
	entityId int,
	metadata string,
	action string,
) (*ManageEntityResponse, error) {
	req_ := &graphql.Request{
		OpName: "ManageEntity",
		Query:  ManageEntity_Operation,
		Variables: &__ManageEntityInput{
			RequestId:  requestId,
			UserId:     userId,
			Signer:     signer,
			EntityType: entityType,
			EntityId:   entityId,
			Metadata:   metadata,
			Action:     action,
		},
	}
	var err_ error

	var data_ ManageEntityResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
